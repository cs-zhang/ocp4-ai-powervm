---
# We can just use the worker.ign created at day1, so don't need this section
- name: Create the ignition for day2 worker of agent installer
  shell: |
    oc extract -n openshift-machine-api secret/worker-user-data-managed --keys=userData --to=- > worker.ign
    sudo cp worker.ign /var/www/html/ignition/.
  args:
    chdir: "{{ workdir }}"

# - name: embed the ignition file to rhcos-worker-ign.iso
#   when: rhcos_iso is defined
#   shell: "coreos-installer iso ignition embed agent.iso -o rhcos-worker-ign.iso -fi worker.ign"
#   args:
#     chdir: "{{ workdir }}"

- name: Copy first-boot-ppc64le.ign to /www/html/ignition
  become: true
  vars:
    disk: "{{ day2_worker.disk | default( disk )}}"
  template:
    src: ../templates/first-boot-ppc64le.ign.j2
    dest: "/var/www/html/ignition/first-boot-day2-ppc64le.ign"

- name: Best effort SELinux repair - Apache
  become: true
  shell: "restorecon -vR /var/www/html || true"

- name: Boot Workers with Day2 ISO image
  include_tasks: netboot.yaml

- name: Wait for node CSR request
  environment:
    KUBECONFIG: "{{ kubeconfig_file }}"
  shell: |
     oc get csr | awk  '/worker-.*Pending/ { print $1 }'
  register: nodeCsrName
  until:  nodeCsrName.stdout|length != 0
  delay: 30
  retries: 60

- name: Approve node CSR
  environment:
    KUBECONFIG: "{{ kubeconfig_file }}"
  shell: |
    oc adm certificate approve "{{ item }}"
  loop: "{{ nodeCsrName.stdout_lines | flatten}}"

- name: Ensure all hosts added to OS cluster
  environment:
    KUBECONFIG: "{{ kubeconfig_file }}"
  shell: |
    oc get node "{{ item.name }}" --no-headers
  register: cluster_nodes
  with_items: "{{ day2_workers }}"
  until:
  - '" Ready " in cluster_nodes.stdout'
  retries: 30
  delay: 30


