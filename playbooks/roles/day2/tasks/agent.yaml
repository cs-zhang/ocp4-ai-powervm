---

- name: Boot Workers with Day2 ISO image
  shell: |
        orig_mac={{ item.macaddr }}
        pvm_mac=`echo ${orig_mac//:}`
        pvmcec={{ item.pvmcec }}
        pvmlpar={{ item.pvmlpar }}
        pvm_profile=`ssh -o StrictHostKeyChecking=no {{ pvm_hmc }} "lssyscfg -r lpar -m ${pvmcec} --filter lpar_names=${pvmlpar} -F curr_profile"`
        remote_cmd="lpar_netboot -i -D -f -t ent -m ${pvm_mac} -s auto -d auto -S {{ helper.ipaddr }} -C {{ item.ipaddr }} -G {{ dhcp.router }} ${pvmlpar} ${pvm_profile} ${pvmcec}"
        ssh -o StrictHostKeyChecking=no {{ pvm_hmc }} "${remote_cmd}"
  with_items: "{{ day2_workers }}"

- name: Wait for node CSR request
  environment:
    KUBECONFIG: "{{ kubeconfig_file }}"
  shell: |
     oc get csr | awk  '/worker-.*Pending/ { print $1 }'
  register: nodeCsrName
  until:  nodeCsrName.stdout|length != 0
  delay: 30
  retries: 60

- name: Approve node CSR
  environment:
    KUBECONFIG: "{{ kubeconfig_file }}"
  shell: |
    oc adm certificate approve "{{ item }}"
  loop: "{{ nodeCsrName.stdout_lines | flatten}}"

- name: Ensure all hosts added to OS cluster
  environment:
    KUBECONFIG: "{{ kubeconfig_file }}"
  shell: |
    oc get node "{{ item.name }}" --no-headers
  register: cluster_nodes
  with_items: "{{ day2_workers }}"
  until:
  - '" Ready " in cluster_nodes.stdout'
  retries: 30
  delay: 30


